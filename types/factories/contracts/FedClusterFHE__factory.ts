/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FedClusterFHE,
  FedClusterFHEInterface,
} from "../../contracts/FedClusterFHE";

const _abi = [
  {
    inputs: [],
    name: "HandlesAlreadySavedForRequestID",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidKMSSignatures",
    type: "error",
  },
  {
    inputs: [],
    name: "NoHandleFoundForRequestID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ClusteringRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "DataPointClustered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DataPointSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestID",
        type: "uint256",
      },
    ],
    name: "DecryptionFulfilled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "clusterId",
        type: "string",
      },
    ],
    name: "calculateClusterCentroids",
    outputs: [
      {
        internalType: "string",
        name: "centroidFeatures",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dataPointCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "cleartexts",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "decryptClusterStats",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "decryptedDataPoints",
    outputs: [
      {
        internalType: "string",
        name: "features",
        type: "string",
      },
      {
        internalType: "string",
        name: "dataOwner",
        type: "string",
      },
      {
        internalType: "string",
        name: "clusterId",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isClustered",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "encryptedDataPoints",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "euint32",
        name: "encryptedFeatures",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedDataOwner",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedClusterId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "targetFeatures",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "similarityThreshold",
        type: "uint256",
      },
    ],
    name: "findSimilarClusters",
    outputs: [
      {
        internalType: "string[]",
        name: "similarClusters",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dataPointId",
        type: "uint256",
      },
    ],
    name: "getDecryptedDataPoint",
    outputs: [
      {
        internalType: "string",
        name: "features",
        type: "string",
      },
      {
        internalType: "string",
        name: "dataOwner",
        type: "string",
      },
      {
        internalType: "string",
        name: "clusterId",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isClustered",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "clusterId",
        type: "string",
      },
    ],
    name: "getEncryptedClusterStats",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "cleartexts",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "performClustering",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "clusterId",
        type: "string",
      },
    ],
    name: "requestClusterStatsDecryption",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dataPointId",
        type: "uint256",
      },
    ],
    name: "requestFederatedClustering",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "euint32",
        name: "encryptedFeatures",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedDataOwner",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedClusterId",
        type: "bytes32",
      },
    ],
    name: "submitEncryptedDataPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234610154575f6060610014610158565b828152826020820152826040820152015261002d610158565b606073687820221192c5b662b25367f70076a37bc79b6c9182815273848b0066793bcc60346da1f49049357399b8d59580602083015273a02cda4ca3a71d7c46997716f4283aa851c2881291826040820152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac938491015260018060a01b0319937f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970090858254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970190848254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970290838254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970391825416179055604051611db1908161018c8239f35b5f80fd5b60405190608082016001600160401b0381118382101761017757604052565b634e487b7160e01b5f52604160045260245ffdfe604060808152600480361015610013575f80fd5b5f3560e01c8063032dc9c01461136c5780631da0a3f514610fb4578063466d3c6d14610f6a57806365f1906614610f0f5780636905bae7146109975780637fcc65e914610945578063cf92502214610928578063d342c7ee1461062a578063da1f12ab1461060e578063e681943e146105be578063f38421c014610431578063faa0df55146103d75763fefb6fc4146100aa575f80fd5b346103815760209182600319360112610381576001600160401b03928235848111610381576100dc90369085016114c9565b8251908051918381818401946100f38183886113c2565b81016003815203019020548015610398578451968588018881108282111761038557865260019760018152858101928636853761012f82611723565b525f7f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf009384549960018060a01b03807f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497005416803b15610381575f8c518092637d6e912360e11b82528d868301528183816101ac602482018d611cd2565b03925af1801561037757610364575b507f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497025416803b1561036057838c8c51928391633263b83b60e01b83528583015260606024830152818381610212606482018c611cd2565b637340ca1f60e11b604483015203925af180156103565790849161033e575b508b90527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf01808a528a84205461032f578b84528952898320935194851161031c57600160401b851161031c575082548484558085106102f5575b50918152868120905b8381106102e457898960058a8a8a8a6102ad8154611681565b90556102d683865180936102c9838301968792519283916113c2565b810103808452018261148d565b519020935f52525f20555f80f35b825182820155918701918a01610294565b8383528b858a852092830192015b82811061031157505061028b565b5f8155018c90610303565b634e487b7160e01b835260419052602482fd5b508951633f06d22b60e01b8152fd5b6103479061144b565b61035257825f610231565b8280fd5b8b513d86823e3d90fd5b8380fd5b61036f91945061144b565b5f925f6101bb565b8c513d5f823e3d90fd5b5f80fd5b604188634e487b7160e01b5f525260245ffd5b845162461bcd60e51b815260208188018181526011918101919091527010db1d5cdd195c881b9bdd08199bdd5b99607a1b604082015281906060010390fd5b5090346103815760203660031901126103815781356001600160401b03811161038157602061040d819461041f933691016114c9565b818451938285809451938492016113c2565b81016003815203019020549051908152f35b503461038157816003193601126103815780356001600160401b0381116103815761045f90369083016114c9565b602435915f915f9154915b828110610588575061049361047e846119f9565b9361048b8751958661148d565b8085526119f9565b60209490601f1901855f5b828110610578575050505f915f5b84811061050f57878787825191808301818452825180915281858501958260051b8601019301915f955b8287106104e35785850386f35b9091929382806104ff600193603f198a820301865288516113e3565b96019201960195929190926104d6565b8261053361052d610528610522856118e7565b50611547565b61176b565b84611c7f565b1015610542575b6001016104ac565b92610570600191610555610522876118e7565b61055f828a611757565b5261056a8189611757565b50611681565b93905061053a565b606082828901015201869061049e565b8461059b61052d610528610522856118e7565b10156105aa575b60010161046a565b926105b6600191611681565b9390506105a2565b8234610381576105ef6105e96105d3366115e9565b928195835f9493945260056020525f2054611bfa565b50611a10565b602081805181010312610381576020015163ffffffff81160361038157005b8234610381575f36600319011261038157602090516127118152f35b5034610381576020918260031936011261038157813591825f526001808552825f20906002865261066460ff6003865f2001541615611865565b83516001600160401b0390608081018281118282101761091557865260038152878101936060368637600181015461069b83611723565b5260028101548251600110156109025782880152600301548151600210156108ef5760608201525f7f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf009485549660018060a01b03807f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497005416803b15610381575f8d8c51928391637d6e912360e11b83528683015281838161073f602482018d611cd2565b03925af180156108e5576108d2575b507f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497025416803b1561036057838a518092633263b83b60e01b82528b85830152606060248301528183816107a4606482018c611cd2565b636905bae760e01b604483015203925af180156108c8579084916108b4575b508890527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf01808c52898420546108a5578884528b52888320935194851161031c57600160401b851161031c5750825484845580851061087e575b50918152888120905b83811061086d5788808960058d8b8b61083f8154611681565b90555f52525f20557f51a7ce8b8d188d6a96a3fb3bfb706f59bb900bd906d9006209fa2376a7ccf3495f80a2005b825182820155918901918401610826565b83835285858c852092830192015b82811061089a57505061081d565b5f815501869061088c565b508851633f06d22b60e01b8152fd5b6108bd9061144b565b61035257825f6107c3565b8a513d86823e3d90fd5b6108dd91945061144b565b5f925f61074e565b8b513d5f823e3d90fd5b603286634e487b7160e01b5f525260245ffd5b603287634e487b7160e01b5f525260245ffd5b604186634e487b7160e01b5f525260245ffd5b8234610381575f366003190112610381576020905f549051908152f35b50346103815760203660031901126103815760a09181355f526001602052805f208054926001820154926002830154916003840154930154938151958652602086015284015260608301526080820152f35b509034610381576109a7366115e9565b90825f9493945260209160058352835f2054948515610eda57855f5260028452845f20906109e960039385858501936109e460ff86541615611865565b611a10565b83518401916060858785019403126103815785850151906001600160401b0391828111610381578488610a1e928901016118a5565b9588810151838111610381578589610a38928401016118a5565b9460608201519184831161038157610a52920189016118a5565b95805190838211610ec757610a7182610a6b855461150f565b85611632565b8890601f8311600114610e6557610a9f92915f9183610d72575b50508160011b915f199060031b1c19161790565b81555b60019384820190805190848211610e5257610ac182610a6b855461150f565b8990601f8311600114610ded579180610af39260029695945f92610d725750508160011b915f199060031b1c19161790565b90555b01948051918211610dda57610b1582610b0f885461150f565b88611632565b8690601f8311600114610d7d57610b4292915f9183610d725750508160011b915f199060031b1c19161790565b84555b805460ff19168217905584518481610b5d81876116a3565b858152030190205415610d0b575b8495965f95518581610b7d81886116a3565b86815203019020549160018060a01b0390867f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970191604484845416918c519b8c938492639cd07acb60e01b8452898401528860248401525af1978815610d01575f98610cd2575b50878415610cc2575b15610ca4575b915f60649288959454168a51998a95869463022f65e760e31b865285015260248401528160448401525af1938415610c9a575f94610c69575b50610c3b939451938480936116a3565b90815203019020557f5782c76a62269e41fd59b81e9adefe2c8633de5ca64754c42c5fb558e896d5205f80a2005b93508284813d8311610c93575b610c80818361148d565b8101031261038157610c3b935193610c2b565b503d610c76565b85513d5f823e3d90fd5b96508592915f606492610cb5611d05565b9992949550925050610bf2565b9350610ccc611d05565b93610bec565b9097508681813d8311610cfa575b610cea818361148d565b810103126103815751965f610be3565b503d610ce0565b89513d5f823e3d90fd5b610d13611d05565b85518581610d2181886116a3565b86815203019020558654600160401b811015610385578082610d45920189556118e7565b610d605796610d57845f97989961191c565b96959450610b6b565b5f88634e487b7160e01b82525260245ffd5b015190505f80610a8b565b849291601f19831691885f52895f20925f5b8b828210610dc45750508411610dad575b505050811b018455610b45565b01515f1983881b60f8161c191690555f8080610da0565b8385015186558997909501949384019301610d8f565b60418a634e487b7160e01b5f525260245ffd5b9392918791601f19821690845f528c5f20918d5f905b828210610e3b575050968360029810610e24575b505050811b019055610af6565b01515f19838c1b60f8161c191690555f8080610e17565b838a015185558c969094019392830192018e610e03565b60418d634e487b7160e01b5f525260245ffd5b90601f19831691845f528a5f20925f5b8c828210610eb1575050908460019594939210610e9a575b505050811b018155610aa2565b01515f19838a1b60f8161c191690555f8080610e8d565b6001859682939686015181550195019301610e75565b60418c634e487b7160e01b5f525260245ffd5b845162461bcd60e51b8152808801859052600f60248201526e125b9d985b1a59081c995c5d595cdd608a1b6044820152606490fd5b503461038157602036600319011261038157355f526002602052805f2090610f66610f3983611547565b91610f4660018501611547565b9360ff6003610f5760028401611547565b92015416915194859485611408565b0390f35b509034610381576020366003190112610381578135916001600160401b03831161038157610528610fa191610f66943691016114c9565b90519182916020835260208301906113e3565b5090346103815760603660031901126103815760245f5491600180840180941161135a57835f5581519260a08401906001600160401b0391858110838211176113475784528585526020948786820181358152868301843581526060840190604435825260808501924284528b5f52888b52895f209551865551888601555160028501555160038401555191015583519160808301838110828211176113355780865261106081611472565b5f8152835284519361107185611472565b5f855286840194855285519261108684611472565b5f845286850193845260608501955f8752895f5260028952875f2095518051908582116112c3576110c1826110bb8a5461150f565b8a611632565b8a90601f83116001146112d5576110ee92915f9183610d725750508160011b915f199060031b1c19161790565b86555b518051868401918582116112c35761110d82610a6b855461150f565b8a90601f83116001146112635761113a92915f9183610d725750508160011b915f199060031b1c19161790565b90555b600285019351998a5193841161125257505061115d82610a6b855461150f565b8690601f83116001146111cd57508160039493926111b2927f7ff6c652da66c3270ca682d025621db1dec2915520e5d4a687a81f00c708d4979a9b5f92610d725750508160011b915f199060031b1c19161790565b90555b019051151560ff8019835416911617905551428152a2005b9190601f19821699845f52885f209a5f5b81811061123d5750917f7ff6c652da66c3270ca682d025621db1dec2915520e5d4a687a81f00c708d4979a9b91846003989796959410611226575b505050811b0190556111b5565b01515f1983881b60f8161c191690555f8080611219565b838301518d559b85019b928a01928a016111de565b604190634e487b7160e01b5f52525ffd5b8592918c91601f198416865f52835f20935f905b8282106112ac5750508411611294575b505050811b01905561113d565b01515f1960f88460031b161c191690555f8080611287565b8385015186558a979095019493840193018f611277565b8360418e634e487b7160e01b5f52525ffd5b8592918c91601f1984168b5f52835f20935f905b82821061131e5750508411611306575b505050811b0186556110f1565b01515f1960f88460031b161c191690555f80806112f9565b8385015186558a979095019493840193018f6112e9565b8260418a634e487b7160e01b5f52525ffd5b50634e487b7160e01b5f90815260418852fd5b82601186634e487b7160e01b5f52525ffd5b503461038157602036600319011261038157355f526002602052805f2090610f6660ff60038401541661139e84611547565b926113b760026113b060018801611547565b9601611547565b905194859485611408565b5f5b8381106113d35750505f910152565b81810151838201526020016113c4565b906020916113fc815180928185528580860191016113c2565b601f01601f1916010190565b92611435606093611427611443949897986080885260808801906113e3565b9086820360208801526113e3565b9084820360408601526113e3565b931515910152565b6001600160401b03811161145e57604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b0382111761145e57604052565b90601f801991011681019081106001600160401b0382111761145e57604052565b6001600160401b03811161145e57601f01601f191660200190565b81601f82011215610381578035906114e0826114ae565b926114ee604051948561148d565b8284526020838301011161038157815f926020809301838601378301015290565b90600182811c9216801561153d575b602083101461152957565b634e487b7160e01b5f52602260045260245ffd5b91607f169161151e565b9060405191825f82546115598161150f565b908184526020946001916001811690815f146115c75750600114611589575b5050506115879250038361148d565b565b5f90815285812095935091905b8183106115af57505061158793508201015f8080611578565b85548884018501529485019487945091830191611596565b9250505061158794925060ff191682840152151560051b8201015f8080611578565b606060031982011261038157600435916001600160401b036024358181116103815783611618916004016114c9565b926044359182116103815761162f916004016114c9565b90565b601f821161163f57505050565b5f5260205f20906020601f840160051c83019310611677575b601f0160051c01905b81811061166c575050565b5f8155600101611661565b9091508190611658565b5f19811461168f5760010190565b634e487b7160e01b5f52601160045260245ffd5b5f929181546116b18161150f565b9260019180831690811561170857506001146116ce575b50505050565b9091929394505f5260209060205f20905f915b8583106116f7575050505001905f8080806116c8565b8054858401529183019181016116e1565b60ff191684525050508115159091020191505f8080806116c8565b8051156117305760200190565b634e487b7160e01b5f52603260045260245ffd5b6060518110156117305760051b60800190565b80518210156117305760209160051b010190565b5f8054909160015b828111156117a55750509015905061179357606051156117305760805190565b60405161179f81611472565b5f815290565b805f526002602090808252604091825f208260ff6003830154169182611813575b50506117de575b5050506117d990611681565b611773565b61180a928497926117f7926117d9965f52525f20611547565b61180082611744565b5261056a81611744565b93905f806117cd565b855184810193509161183b91839161182d918691016116a3565b03601f19810183528261148d565b51902083518281019061185a8482816102c98c878151938492016113c2565b51902014825f6117c6565b1561186c57565b60405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e4818db1d5cdd195c9959607a1b6044820152606490fd5b81601f820112156103815780516118bb816114ae565b926118c9604051948561148d565b818452602082840101116103815761162f91602080850191016113c2565b6004548110156117305760045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01905f90565b908082146119f55761192e815461150f565b906001600160401b03821161145e5761194b82610a6b855461150f565b5f90601f83116001146119875761197892915f918361197c5750508160011b915f199060031b1c19161790565b9055565b015490505f80610a8b565b90601f198316915f5260209160205f2090855f5260205f20935f905b8282106119dc5750509084600195949392106119c4575b505050811b019055565b01545f1960f88460031b161c191690555f80806119ba565b84958192958501548155600180910196019401906119a3565b5050565b6001600160401b03811161145e5760051b60200190565b9190825f527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf0191602091838352604093845f205415611be957855f528352835f209084518083868295549384815201905f52865f20925f5b88828210611bd357505050611a7f9250038361148d565b80518085019081861161168f57860180911161168f57611b205f8694611ace89611b339681519681611aba89935180928d80870191016113c2565b8201908a820152038881018752018561148d565b611b4260018060a01b037f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497035416948a51988997889687956378542ead60e01b8752606060048801526064870190611cd2565b60031993848783030160248801526113e3565b918483030160448501526113e3565b03925af1918215611bc9575f92611b92575b505015611b8257507f1af0453083661051f6e56e5c070792320652e612154bf9af8637bb1e7655b99d5f80a2565b5163cf6c44e960e01b8152600490fd5b90809250813d8311611bc2575b611ba9818361148d565b8101031261038157518015158103610381575f80611b54565b503d611b9f565b83513d5f823e3d90fd5b8554845260019586019588955093019201611a68565b845163d66ca67560e01b8152600490fd5b600454905f5b828110611c405760405162461bcd60e51b815260206004820152601160248201527010db1d5cdd195c881b9bdd08199bdd5b99607a1b6044820152606490fd5b81611c4a826118e7565b50604051611c608161182d6020820180956116a3565b51902014611c7057600101611c00565b61162f925061052291506118e7565b9060405191602092611ca08482816102c981830196878151938492016113c2565b51902091611cc06040519182816102c981830196878151938492016113c2565b51902003611ccd57606490565b603290565b9081518082526020808093019301915f5b828110611cf1575050505090565b835185529381019392810192600101611ce3565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f600480830182905260248301529091602091839160449183916001600160a01b03165af1908115611d99575f91611d6a575090565b90506020813d602011611d91575b81611d856020938361148d565b81010312610381575190565b3d9150611d78565b6040513d5f823e3d90fdfea164736f6c6343000818000a";

type FedClusterFHEConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FedClusterFHEConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FedClusterFHE__factory extends ContractFactory {
  constructor(...args: FedClusterFHEConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FedClusterFHE & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FedClusterFHE__factory {
    return super.connect(runner) as FedClusterFHE__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FedClusterFHEInterface {
    return new Interface(_abi) as FedClusterFHEInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FedClusterFHE {
    return new Contract(address, _abi, runner) as unknown as FedClusterFHE;
  }
}
