/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VeriIdWalletFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEncryptedCredential"
      | "credCount"
      | "encryptedCreds"
      | "generateProof"
      | "getProofResult"
      | "handleProofVerification"
      | "proofResults"
      | "protocolId"
      | "registerCredentialType"
      | "revokeCredential"
      | "transferOwnership"
      | "walletOwner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CredentialAdded"
      | "DecryptionFulfilled"
      | "ProofRequested"
      | "ProofVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addEncryptedCredential",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "credCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encryptedCreds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateProof",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProofResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleProofVerification",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proofResults",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerCredentialType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCredential",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "walletOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addEncryptedCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encryptedCreds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProofResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleProofVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proofResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCredentialType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletOwner",
    data: BytesLike
  ): Result;
}

export namespace CredentialAddedEvent {
  export type InputTuple = [credId: BigNumberish, credType: BytesLike];
  export type OutputTuple = [credId: bigint, credType: string];
  export interface OutputObject {
    credId: bigint;
    credType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofRequestedEvent {
  export type InputTuple = [proofId: BytesLike, credType: BytesLike];
  export type OutputTuple = [proofId: string, credType: string];
  export interface OutputObject {
    proofId: string;
    credType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [proofId: BytesLike, isValid: boolean];
  export type OutputTuple = [proofId: string, isValid: boolean];
  export interface OutputObject {
    proofId: string;
    isValid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VeriIdWalletFHE extends BaseContract {
  connect(runner?: ContractRunner | null): VeriIdWalletFHE;
  waitForDeployment(): Promise<this>;

  interface: VeriIdWalletFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEncryptedCredential: TypedContractMethod<
    [credType: BytesLike, encryptedValue: BytesLike, expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;

  credCount: TypedContractMethod<[], [bigint], "view">;

  encryptedCreds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean] & {
        credId: bigint;
        credType: string;
        encryptedValue: string;
        issuedAt: bigint;
        expiresAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  generateProof: TypedContractMethod<
    [
      proofId: BytesLike,
      credType: BytesLike,
      threshold: BytesLike,
      condition: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getProofResult: TypedContractMethod<
    [proofId: BytesLike],
    [[boolean, bigint] & { isValid: boolean; verifiedAt: bigint }],
    "view"
  >;

  handleProofVerification: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  proofResults: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, bigint] & { isValid: boolean; verifiedAt: bigint }],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registerCredentialType: TypedContractMethod<
    [credTypeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeCredential: TypedContractMethod<
    [credId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  walletOwner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEncryptedCredential"
  ): TypedContractMethod<
    [credType: BytesLike, encryptedValue: BytesLike, expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "encryptedCreds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean] & {
        credId: bigint;
        credType: string;
        encryptedValue: string;
        issuedAt: bigint;
        expiresAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateProof"
  ): TypedContractMethod<
    [
      proofId: BytesLike,
      credType: BytesLike,
      threshold: BytesLike,
      condition: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProofResult"
  ): TypedContractMethod<
    [proofId: BytesLike],
    [[boolean, bigint] & { isValid: boolean; verifiedAt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleProofVerification"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proofResults"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, bigint] & { isValid: boolean; verifiedAt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerCredentialType"
  ): TypedContractMethod<[credTypeHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCredential"
  ): TypedContractMethod<[credId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "walletOwner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CredentialAdded"
  ): TypedContractEvent<
    CredentialAddedEvent.InputTuple,
    CredentialAddedEvent.OutputTuple,
    CredentialAddedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "ProofRequested"
  ): TypedContractEvent<
    ProofRequestedEvent.InputTuple,
    ProofRequestedEvent.OutputTuple,
    ProofRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;

  filters: {
    "CredentialAdded(uint256,bytes32)": TypedContractEvent<
      CredentialAddedEvent.InputTuple,
      CredentialAddedEvent.OutputTuple,
      CredentialAddedEvent.OutputObject
    >;
    CredentialAdded: TypedContractEvent<
      CredentialAddedEvent.InputTuple,
      CredentialAddedEvent.OutputTuple,
      CredentialAddedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "ProofRequested(bytes32,bytes32)": TypedContractEvent<
      ProofRequestedEvent.InputTuple,
      ProofRequestedEvent.OutputTuple,
      ProofRequestedEvent.OutputObject
    >;
    ProofRequested: TypedContractEvent<
      ProofRequestedEvent.InputTuple,
      ProofRequestedEvent.OutputTuple,
      ProofRequestedEvent.OutputObject
    >;

    "ProofVerified(bytes32,bool)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
  };
}
