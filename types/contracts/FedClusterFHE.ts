/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FedClusterFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateClusterCentroids"
      | "dataPointCount"
      | "decryptClusterStats"
      | "decryptedDataPoints"
      | "encryptedDataPoints"
      | "findSimilarClusters"
      | "getDecryptedDataPoint"
      | "getEncryptedClusterStats"
      | "performClustering"
      | "protocolId"
      | "requestClusterStatsDecryption"
      | "requestFederatedClustering"
      | "submitEncryptedDataPoint"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClusteringRequested"
      | "DataPointClustered"
      | "DataPointSubmitted"
      | "DecryptionFulfilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateClusterCentroids",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dataPointCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decryptClusterStats",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptedDataPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedDataPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findSimilarClusters",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptedDataPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedClusterStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "performClustering",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestClusterStatsDecryption",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFederatedClustering",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEncryptedDataPoint",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateClusterCentroids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataPointCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptClusterStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptedDataPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedDataPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findSimilarClusters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptedDataPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedClusterStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performClustering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestClusterStatsDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFederatedClustering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEncryptedDataPoint",
    data: BytesLike
  ): Result;
}

export namespace ClusteringRequestedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataPointClusteredEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataPointSubmittedEvent {
  export type InputTuple = [id: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [id: bigint, timestamp: bigint];
  export interface OutputObject {
    id: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FedClusterFHE extends BaseContract {
  connect(runner?: ContractRunner | null): FedClusterFHE;
  waitForDeployment(): Promise<this>;

  interface: FedClusterFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateClusterCentroids: TypedContractMethod<
    [clusterId: string],
    [string],
    "view"
  >;

  dataPointCount: TypedContractMethod<[], [bigint], "view">;

  decryptClusterStats: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  decryptedDataPoints: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        features: string;
        dataOwner: string;
        clusterId: string;
        isClustered: boolean;
      }
    ],
    "view"
  >;

  encryptedDataPoints: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        encryptedFeatures: string;
        encryptedDataOwner: string;
        encryptedClusterId: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  findSimilarClusters: TypedContractMethod<
    [targetFeatures: string, similarityThreshold: BigNumberish],
    [string[]],
    "view"
  >;

  getDecryptedDataPoint: TypedContractMethod<
    [dataPointId: BigNumberish],
    [
      [string, string, string, boolean] & {
        features: string;
        dataOwner: string;
        clusterId: string;
        isClustered: boolean;
      }
    ],
    "view"
  >;

  getEncryptedClusterStats: TypedContractMethod<
    [clusterId: string],
    [string],
    "view"
  >;

  performClustering: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestClusterStatsDecryption: TypedContractMethod<
    [clusterId: string],
    [void],
    "nonpayable"
  >;

  requestFederatedClustering: TypedContractMethod<
    [dataPointId: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitEncryptedDataPoint: TypedContractMethod<
    [
      encryptedFeatures: BytesLike,
      encryptedDataOwner: BytesLike,
      encryptedClusterId: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateClusterCentroids"
  ): TypedContractMethod<[clusterId: string], [string], "view">;
  getFunction(
    nameOrSignature: "dataPointCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decryptClusterStats"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptedDataPoints"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        features: string;
        dataOwner: string;
        clusterId: string;
        isClustered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "encryptedDataPoints"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        encryptedFeatures: string;
        encryptedDataOwner: string;
        encryptedClusterId: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "findSimilarClusters"
  ): TypedContractMethod<
    [targetFeatures: string, similarityThreshold: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDecryptedDataPoint"
  ): TypedContractMethod<
    [dataPointId: BigNumberish],
    [
      [string, string, string, boolean] & {
        features: string;
        dataOwner: string;
        clusterId: string;
        isClustered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedClusterStats"
  ): TypedContractMethod<[clusterId: string], [string], "view">;
  getFunction(
    nameOrSignature: "performClustering"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestClusterStatsDecryption"
  ): TypedContractMethod<[clusterId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFederatedClustering"
  ): TypedContractMethod<[dataPointId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitEncryptedDataPoint"
  ): TypedContractMethod<
    [
      encryptedFeatures: BytesLike,
      encryptedDataOwner: BytesLike,
      encryptedClusterId: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClusteringRequested"
  ): TypedContractEvent<
    ClusteringRequestedEvent.InputTuple,
    ClusteringRequestedEvent.OutputTuple,
    ClusteringRequestedEvent.OutputObject
  >;
  getEvent(
    key: "DataPointClustered"
  ): TypedContractEvent<
    DataPointClusteredEvent.InputTuple,
    DataPointClusteredEvent.OutputTuple,
    DataPointClusteredEvent.OutputObject
  >;
  getEvent(
    key: "DataPointSubmitted"
  ): TypedContractEvent<
    DataPointSubmittedEvent.InputTuple,
    DataPointSubmittedEvent.OutputTuple,
    DataPointSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;

  filters: {
    "ClusteringRequested(uint256)": TypedContractEvent<
      ClusteringRequestedEvent.InputTuple,
      ClusteringRequestedEvent.OutputTuple,
      ClusteringRequestedEvent.OutputObject
    >;
    ClusteringRequested: TypedContractEvent<
      ClusteringRequestedEvent.InputTuple,
      ClusteringRequestedEvent.OutputTuple,
      ClusteringRequestedEvent.OutputObject
    >;

    "DataPointClustered(uint256)": TypedContractEvent<
      DataPointClusteredEvent.InputTuple,
      DataPointClusteredEvent.OutputTuple,
      DataPointClusteredEvent.OutputObject
    >;
    DataPointClustered: TypedContractEvent<
      DataPointClusteredEvent.InputTuple,
      DataPointClusteredEvent.OutputTuple,
      DataPointClusteredEvent.OutputObject
    >;

    "DataPointSubmitted(uint256,uint256)": TypedContractEvent<
      DataPointSubmittedEvent.InputTuple,
      DataPointSubmittedEvent.OutputTuple,
      DataPointSubmittedEvent.OutputObject
    >;
    DataPointSubmitted: TypedContractEvent<
      DataPointSubmittedEvent.InputTuple,
      DataPointSubmittedEvent.OutputTuple,
      DataPointSubmittedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
  };
}
